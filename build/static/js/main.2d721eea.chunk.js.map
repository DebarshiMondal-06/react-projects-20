{"version":3,"sources":["GraphQL_React/Queries.js","GraphQL_React/Component/SongList.js","GraphQL_React/Component/Error.js","GraphQL_React/Component/AddSong.js","GraphQL_React/Component/AddLyric.js","GraphQL_React/Component/ShowLyrics.js","GraphQL_React/Component/OneSong.js","GraphQL_React/App.js","index.js"],"names":["Load_Songs","gql","GET_ONE_SONG","ADD_SONG","DELETE_SONG","ADD_LYRICS_SONG","ADD_LIKES_LYRICS","SongList","useQuery","loading","data","refetch","useMutation","deleteSong","className","to","style","float","allSongs","map","items","i","title","key","color","_id","onClick","id","variables","then","length","marginTop","Error","AddSong","history","useHistory","useState","song","setSong","btnLoader","setBtnLoader","createSong","width","value","onChange","e","target","type","placeholder","refetchQueries","query","setTimeout","push","AddLyric","lyric","setlyric","addLyricToSong","getSong","display","flexWrap","content","songId","letterSpacing","ShowLyrics","likes","likeLyric","padding","marginBottom","cursor","fontSize","OneSong","useParams","fetchPolicy","fontFamily","item","client","ApolloClient","uri","cache","InMemoryCache","headers","App","ApolloProvider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"wRAGaA,EAAaC,YAAH,uEAQVC,EAAeD,YAAH,6JAYZE,EAAWF,YAAH,2GAORG,EAAcH,YAAH,6GAQXI,EAAkBJ,YAAH,6JAOfK,EAAmBL,YAAH,sHCiBdM,EAvDE,WACf,MAAmCC,YAASR,GAApCS,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,QACvB,EAAqBC,YAAYR,GAA1BS,EAAP,oBAcA,OAAO,6BAASC,UAAU,aAEtBL,EACI,wBAAIK,UAAU,eAAd,cACA,0BAAMA,UAAU,YAChB,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,6BAASA,UAAU,QACjB,kBAAC,IAAD,CAAMC,GAAG,QACP,4BAAQD,UAAU,oBAAoBE,MAAO,CAAEC,MAAO,UAAtD,QAEF,wBAAIH,UAAU,WAAd,aAGAJ,EAAKQ,SAASC,KAAI,SAACC,EAAOC,GACxB,IAAQC,EAAUF,EAAVE,MACR,OAAO,6BAASC,IAAKF,EAAGP,UAAU,iBAChC,wBAAIA,UAAU,6BACZ,kBAAC,IAAD,CAAME,MAAO,CAAEQ,MAAO,QAAUT,GAAE,gBAAWK,EAAMK,MAAQH,EAA3D,KACA,uBAAGN,MAAO,CAAEC,MAAO,SACjBS,QAAS,kBA/BRC,EA+B0BP,EAAMK,SA9BnDZ,EAAW,CACTe,UAAW,CACTH,IAAKE,KAENE,MAAK,WACNlB,OANgB,IAACgB,GA+BsCb,UAAU,0BAHrD,QAMA,iCAKJJ,EAAKQ,SAASY,OAAS,EAAI,KAAO,6BAAShB,UAAU,cAAcE,MAAO,CAAEe,UAAW,KACrF,sDAIN,yBAAKjB,UAAU,gB,uCC1CVkB,EAXD,WACZ,OACE,yBAAKlB,UAAU,kBACb,6BAASA,UAAU,eACjB,wBAAIA,UAAU,eAAd,uBACA,kBAAC,IAAD,CAAMC,GAAG,KAAI,4BAAQD,UAAU,mBAAlB,oBCiDNmB,EAlDC,WACd,IAAMC,EAAUC,cAChB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAGA,EAAqB5B,YAAYT,GAA1BsC,EAAP,oBAsBA,OAAO,6BAAS3B,UAAU,YACxB,6CACA,0BAAME,MAAO,CAAE0B,MAAO,QACpB,yBAAK5B,UAAU,QACb,6CAAmBuB,GACnB,2BACEM,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOH,QAClC7B,UAAU,eACViC,KAAK,OACLC,YAAY,eAEhB,kBAAC,IAAD,CAAMjC,GAAG,KAAI,4BAAQD,UAAU,gBAAlB,SAVf,OAWE,4BAAQiC,KAAK,SAASrB,QAAS,kBA/BjCc,GAAa,QACbC,EAAW,CACTb,UAAW,CACTN,MAAOe,GAETY,eAAgB,CAAC,CACfC,MAAOlD,MAER6B,MAAK,WACNS,EAAQ,IACRE,GAAa,GACbW,YAAW,WACTjB,EAAQkB,KAAK,OACZ,UAkB8CtC,UAAU,mBAA3D,cAEE,6BAASA,UAAS,UAAKyB,EAAY,SAAW,sBCTvCc,EApCE,SAAC,GAA2B,IAAzB3C,EAAwB,EAAxBA,KAAMiB,EAAkB,EAAlBA,GAAIhB,EAAc,EAAdA,QAE5B,EAA0ByB,mBAAS,IAAnC,mBAAOkB,EAAP,KAAcC,EAAd,KACA,EAAyB3C,YAAYP,GAA9BmD,EAAP,oBAgBA,OAAO,6BAAS1C,UAAU,QACxB,wBAAIA,UAAU,mBAAmBJ,GAAQA,EAAK+C,QAAQnC,OACtD,0CACA,yBAAKN,MAAO,CAAE0C,QAAS,OAAQC,SAAU,SACvC,2BAAOhB,MAAOW,EACZV,SAAU,SAACC,GAAD,OAAOU,EAASV,EAAEC,OAAOH,QACnC3B,MAAO,CAAE0B,MAAO,OAChB5B,UAAU,eACViC,KAAK,SALT,WAQE,4BAAQrB,QAAS,WAvBnB8B,EAAe,CACb5B,UAAW,CACTgC,QAASN,EACTO,OAAQlC,KAETE,MAAK,WACN0B,EAAS,IACT5C,QAgBwCK,MAAO,CAAE0B,MAAO,QAASoB,cAAe,GAC9EhD,UAAU,qBADZ,UCRSiD,EAvBI,SAAC,GAA6B,IAA3BH,EAA0B,EAA1BA,QAASnC,EAAiB,EAAjBA,IAAKuC,EAAY,EAAZA,MAElC,EAAoBpD,YAAYN,GAAzB2D,EAAP,oBAWA,OAAO,6BAAS1C,IAAKE,EAAKX,UAAU,iBAClC,wBAAIA,UAAU,YAAYE,MAAO,CAAEkD,QAAS,GAAIC,aAAc,KAC3DP,EACD,0BAAMlC,QAAS,WAVjBuC,EAAU,CACRrC,UAAW,CACTH,IAQ2BA,MAC3BT,MAAO,CAAEC,MAAO,QAASmD,OAAQ,YACjC,uBAAGtD,UAAU,qBAFf,OAE4C,0BAAME,MAAO,CAACqD,SAAU,KAAML,GAF1E,WCiCSM,EA7CC,WACd,IAAQ3C,EAAO4C,cAAP5C,GACR,EAAmCnB,YAASN,EAC1C,CACE0B,UAAW,CAAEH,IAAKE,GAClB6C,YAAa,iBAHT9D,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QASd,OATA,EAAuBF,QAUd,6BAASK,UAAU,oBAAnB,cAIF,6BAASA,UAAU,gBACxB,0BAAMA,UAAU,YACd,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAG,KAAI,uBAAGD,UAAU,uCAE5B,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAUJ,KAAMA,EAAMiB,GAAIA,EAAIhB,QAASA,IACvC,iCACE,wBAAIK,MAAO,CAAEyD,WAAY,UAAW1C,UAAW,KAA/C,oBACA,yBAAKjB,UAAU,QAEXJ,GAAQA,EAAK+C,QAAQH,MAAMnC,KAAI,SAACuD,EAAMrD,GACpC,OAAO,kBAAC,EAAD,eAAYE,IAAKF,GAAOqD,OAIjChE,GAAQA,EAAK+C,QAAQH,MAAMxB,OAAS,EAAI,KAAO,6BAAShB,UAAU,oBAChE,gEAMV,yBAAKA,UAAU,gBCjCf6D,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sFACLC,MAAO,IAAIC,IACXC,QAAS,CACP,YAAa,oCAmBFC,EAbH,WACV,OAAO,kBAAC,IAAD,KACL,kBAACC,EAAA,EAAD,CAAgBP,OAAQA,GACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAW9E,IACjC,kBAAC,IAAD,CAAO6E,KAAK,YAAYC,UAAWf,IACnC,kBAAC,IAAD,CAAOc,KAAK,OAAOC,UAAWpD,IAC9B,kBAAC,IAAD,CAAOmD,KAAK,IAAIC,UAAWrD,QC1BnCsD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2d721eea.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\n\r\nexport const Load_Songs = gql`\r\n{\r\n  allSongs {\r\n    _id\r\n    title\r\n  }\r\n}`;\r\n\r\nexport const GET_ONE_SONG = gql`\r\nquery Get_A_Song($_id: ID!){\r\n  getSong(_id: $_id){\r\n    title\r\n    lyric {\r\n      _id\r\n      content\r\n      likes\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const ADD_SONG = gql`\r\nmutation Add_Song($title: String!){\r\n  addSong(title: $title){\r\n    _id\r\n  }\r\n}`;\r\n\r\nexport const DELETE_SONG = gql`\r\nmutation Delete_Song($_id: ID!){\r\n    deleteSong(_id: $_id){\r\n      _id\r\n    }\r\n}`;\r\n\r\n\r\nexport const ADD_LYRICS_SONG = gql`\r\nmutation add_Lyrics_Song($content: String, $songId: ID!){\r\n  addLyricToSong(content: $content, songId: $songId){\r\n    _id\r\n  }\r\n}`;\r\n\r\nexport const ADD_LIKES_LYRICS = gql`\r\nmutation add_Likes_Lyrics($_id: ID!){\r\n  likeLyric(_id: $_id){\r\n    _id\r\n    likes\r\n  }\r\n}`;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { DELETE_SONG, Load_Songs } from '../Queries';\r\n\r\n\r\nconst SongList = () => {\r\n  const { loading, data, refetch } = useQuery(Load_Songs);\r\n  const [deleteSong] = useMutation(DELETE_SONG);\r\n\r\n\r\n  const delete_song = (id) => {\r\n    deleteSong({\r\n      variables: {\r\n        _id: id\r\n      }\r\n    }).then(() => {\r\n      refetch();\r\n    });\r\n  }\r\n\r\n\r\n  return <section className=\"container\">\r\n    {\r\n      loading\r\n        ? <h2 className=\"text-center\">Loading...</h2>\r\n        : <main className=\"row mt-5\">\r\n          <div className=\"col-md-3\"></div>\r\n          <div className=\"col-md-6\">\r\n            <article className=\"mb-4\">\r\n              <Link to=\"/add\">\r\n                <button className=\"btn btn-secondary\" style={{ float: 'right' }}>Add</button>\r\n              </Link>\r\n              <h1 className=\"heading\">SongList</h1>\r\n            </article>\r\n            {\r\n              data.allSongs.map((items, i) => {\r\n                const { title } = items;\r\n                return <section key={i} className=\"title-section\">\r\n                  <li className=\"song-name text-capitalize\">\r\n                    <Link style={{ color: 'grey' }} to={`/song/${items._id}`}>{title} </Link>\r\n                    <i style={{ float: 'right' }}\r\n                      onClick={() => delete_song(items._id)} className=\"mt-1 fas fa-trash-alt\">\r\n                    </i>&nbsp;\r\n                  </li>\r\n                  <br />\r\n                </section>\r\n              })\r\n            }\r\n            {\r\n              data.allSongs.length > 0 ? null : <section className=\"text-center\" style={{ marginTop: 80 }}>\r\n                <h3>No Data ðŸ˜•</h3>\r\n              </section>\r\n            }\r\n          </div>\r\n          <div className=\"col-md-3\"></div>\r\n        </main>\r\n    }\r\n  </section>\r\n}\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <article className=\"text-center\">\r\n        <h3 className=\"text-center\">Oops Nothing Found!</h3>\r\n        <Link to=\"/\"><button className=\"btn btn-primary\">Back to home</button></Link>\r\n      </article>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_SONG, Load_Songs } from '../Queries';\r\n\r\n\r\nconst AddSong = () => {\r\n  const history = useHistory();\r\n  const [song, setSong] = useState('');\r\n  const [btnLoader, setBtnLoader] = useState(false);\r\n\r\n\r\n  const [createSong] = useMutation(ADD_SONG);\r\n\r\n\r\n  const set_song = () => {\r\n    setBtnLoader(true);\r\n    createSong({\r\n      variables: {\r\n        title: song\r\n      },\r\n      refetchQueries: [{\r\n        query: Load_Songs\r\n      }]\r\n    }).then(() => {\r\n      setSong('');\r\n      setBtnLoader(false);\r\n      setTimeout(() => {\r\n        history.push('/');\r\n      }, 1500);\r\n    });\r\n  }\r\n\r\n\r\n  return <section className=\"add-song\">\r\n    <h2>Create a Song</h2>\r\n    <main style={{ width: '50%' }}>\r\n      <div className=\"mt-2\">\r\n        <label>Song Name: {song}</label>\r\n        <input\r\n          value={song}\r\n          onChange={(e) => setSong(e.target.value)}\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          placeholder=\"Type here\" />\r\n      </div>\r\n      <Link to=\"/\"><button className=\"btn btn-dark\">Back</button></Link>&nbsp;\r\n      <button type=\"submit\" onClick={() => set_song()} className=\"btn btn-primary\">Add&nbsp;&nbsp;\r\n\r\n        <article className={`${btnLoader ? 'loader' : 'fas fa-check'}`}></article>\r\n\r\n      </button>\r\n    </main>\r\n  </section>\r\n}\r\n\r\nexport default AddSong\r\n","import { useMutation } from '@apollo/client';\r\nimport React, { useState } from 'react'\r\nimport { ADD_LYRICS_SONG } from '../Queries';\r\n\r\n\r\nconst AddLyric = ({ data, id, refetch }) => {\r\n\r\n  const [lyric, setlyric] = useState('');\r\n  const [addLyricToSong] = useMutation(ADD_LYRICS_SONG);\r\n\r\n\r\n  const attach_lyrics = () => {\r\n    addLyricToSong({\r\n      variables: {\r\n        content: lyric,\r\n        songId: id\r\n      }\r\n    }).then(() => {\r\n      setlyric('');\r\n      refetch();\r\n    });\r\n  }\r\n\r\n\r\n  return <article className=\"mb-4\">\r\n    <h2 className=\"text-capitalize\">{data && data.getSong.title}</h2>\r\n    <h6>Add Lyrics</h6>\r\n    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n      <input value={lyric}\r\n        onChange={(e) => setlyric(e.target.value)}\r\n        style={{ width: '80%' }}\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n      />\r\n      &nbsp;&nbsp;\r\n      <button onClick={() => attach_lyrics()} style={{ width: '100px', letterSpacing: 1 }}\r\n        className=\"btn btn-secondary\">Add</button>\r\n    </div>\r\n  </article>\r\n}\r\n\r\nexport default AddLyric\r\n","import { useMutation } from '@apollo/client';\r\nimport React from 'react'\r\nimport { ADD_LIKES_LYRICS } from '../Queries';\r\n\r\nconst ShowLyrics = ({ content, _id, likes }) => {\r\n\r\n  const [likeLyric] = useMutation(ADD_LIKES_LYRICS);\r\n\r\n\r\n  const on_like = (idi) => {\r\n    likeLyric({\r\n      variables: {\r\n        _id: idi\r\n      }\r\n    })\r\n  }\r\n\r\n  return <section key={_id} className=\"title-section\">\r\n    <li className=\"song-name\" style={{ padding: 10, marginBottom: 10 }}>\r\n      {content}\r\n      <span onClick={() => on_like(_id)}\r\n        style={{ float: 'right', cursor: 'pointer' }}>\r\n        <i className=\"far fa-thumbs-up\"></i>&nbsp;<span style={{fontSize: 13}}>{likes}</span>&nbsp;</span>\r\n    </li>\r\n  </section>\r\n}\r\n\r\nexport default ShowLyrics\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport { useQuery } from '@apollo/client';\r\nimport React from 'react'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { GET_ONE_SONG } from '../Queries';\r\nimport AddLyric from './AddLyric';\r\nimport ShowLyrics from './ShowLyrics';\r\n\r\nconst OneSong = () => {\r\n  const { id } = useParams();\r\n  const { data, refetch, loading } = useQuery(GET_ONE_SONG,\r\n    {\r\n      variables: { _id: id },\r\n      fetchPolicy: 'network-only'\r\n    });\r\n\r\n\r\n\r\n\r\n  if (loading) {\r\n    return <section className=\"mt-5 text-center\">\r\n      Loading...\r\n    </section>\r\n  }\r\n  return <section className=\"container-sm\">\r\n    <main className=\"row mt-5\">\r\n      <div className=\"col-md-2\"></div>\r\n      <div className=\"col-md-1\">\r\n        <Link to=\"/\"><i className=\"fas fa-2x fa-long-arrow-alt-left\"></i></Link>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <AddLyric data={data} id={id} refetch={refetch} />\r\n        <article>\r\n          <h5 style={{ fontFamily: 'cursive', marginTop: 40 }}>Available Lyrics</h5>\r\n          <div className=\"mt-4\">\r\n            {\r\n              data && data.getSong.lyric.map((item, i) => {\r\n                return <ShowLyrics key={i} {...item} />\r\n              })\r\n            }\r\n            {\r\n              data && data.getSong.lyric.length > 0 ? null : <section className=\"text-center mt-5\">\r\n                <p>No Lyrics Found! ðŸ˜•</p>\r\n              </section>\r\n            }\r\n          </div>\r\n        </article>\r\n      </div>\r\n      <div className=\"col-md-3\"></div>\r\n    </main>\r\n  </section>\r\n}\r\n\r\nexport default OneSong;\r\n","import React from 'react'\r\nimport SongList from './Component/SongList'\r\nimport {\r\n  ApolloClient,\r\n  ApolloProvider,\r\n  InMemoryCache,\r\n} from '@apollo/client';\r\nimport './style.css';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Error from './Component/Error';\r\nimport AddSong from './Component/AddSong';\r\nimport OneSong from './Component/OneSong';\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://lsp2i6imarbzjnxteybp2dnrhe.appsync-api.ap-northeast-1.amazonaws.com/graphql',\r\n  cache: new InMemoryCache(),\r\n  headers: {\r\n    \"X-api-key\": \"da2-qblslfqv2jg43lu7nlaeysxrh4\"\r\n  },\r\n  // defaultOptions: defaultOptions\r\n});\r\n\r\n\r\nconst App = () => {\r\n  return <BrowserRouter>\r\n    <ApolloProvider client={client}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={SongList} />\r\n        <Route path=\"/song/:id\" component={OneSong} />\r\n        <Route path=\"/add\" component={AddSong} />\r\n        <Route path=\"*\" component={Error} />\r\n      </Switch>\r\n    </ApolloProvider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './GraphQL_React/App';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}